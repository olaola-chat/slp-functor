{{- /*
在模板开始处添加调试信息
*/}}
{{- range .Values.enabledCmds }}
{{- $ctx := dict "name" . "Files" $.Files }}
{{- $cmdValues := fromYaml (include "cmds.getValues" $ctx) }}
{{- $mergedValues := merge $cmdValues.deployment $.Values.deployment }}
{{- $cmdName := $cmdValues.deployment.name | lower }}
{{- $cmdOriginName := $cmdValues.deployment.name }}
{{- $cmdOriginAction := $cmdValues.deployment.action }}
{{- $cmdAction := $cmdValues.deployment.action | lower }}
{{- $cmdInstance := printf "slp-functor-cmd-%s-%s" $cmdName $cmdAction }}
{{- /* 调试信息 */ -}}
{{- if $.Values.debug }}
{{- printf "\nDebug info for command: %s" . | nindent 0 }}
{{- printf "\nCommand Values:" | nindent 0 }}
{{- toYaml $cmdValues | nindent 2 }}
{{- printf "\nMerged Values:" | nindent 0 }}
{{- toYaml $mergedValues | nindent 2 }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $cmdInstance }}-deploy
  namespace: {{ $.Release.Namespace }}
  labels:
    # topology.kubernetes.io/zone: hangzhou-J
    beta.kubernetes.io/os: linux
    k8s.slp.com/cluster: slp
    k8s.slp.com/repository: app
    k8s.slp.com/serverMode: cmd
    k8s.slp.com/cmdName: {{ $cmdName }}
    k8s.slp.com/cmdAction: {{ $cmdAction }}
    k8s.slp.com/app: slp-functor-cmd
    k8s.slp.com/cmd: {{ $cmdInstance }}
  annotations:
    {{- toYaml $mergedValues.annotations | nindent 4}}
spec:
  selector:
    matchLabels:
      app: slp-functor-cmd
      component: {{ $cmdName }}-{{ $cmdAction }}
  {{- if $mergedValues.strategy.enabled }}
  {{ with $mergedValues.strategy }}
  strategy:
    type: {{ .type }}
  {{ if and (eq .type "RollingUpdate") (.rollingUpdate.enabled | default false) }}
    rollingUpdate:
      maxSurge: {{ .rollingUpdate.maxSurge | quote }}
      maxUnavailable: {{ .rollingUpdate.maxUnavailable | quote }}
  {{- end }}
  {{- end }}
  {{- end }}
  replicas: {{ $mergedValues.replicas }}
  template:
    metadata:
      name: {{ $cmdInstance }}
      namespace: {{ $.Release.Namespace }}
      annotations:
        {{- toYaml $mergedValues.annotations | nindent 8}}
      labels:
        app: slp-functor-cmd
        component: {{ $cmdName }}-{{ $cmdAction }}
    spec:
      restartPolicy: Always
      {{ if $mergedValues.affinity.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: k8s.slp.com/cluster
                    operator: In
                    values:
                      - slp
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ $mergedValues.affinity.nodeAffinity.repository.weight | default 50 }}
              preference:
                matchExpressions:
                  - key: k8s.slp.com/repository
                    operator: In
                    values:
                      {{ with $mergedValues.affinity.nodeAffinity.repository.values }}
                      {{- toYaml . | nindent 22 }}
                      {{- else }}
                      - app
                      {{- end }}
            - weight: {{ $mergedValues.affinity.nodeAffinity.serverMode.weight | default 100 }}
              preference:
                matchExpressions:
                  - key: k8s.slp.com/serverMode
                    operator: In
                    values:
                      {{- with $mergedValues.affinity.nodeAffinity.serverMode.values }}
                      {{- toYaml . | nindent 22 }}
                      {{- else }}
                      - cmd
                      {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ $mergedValues.affinity.podAntiAffinity.weight | default 100 }}
              podAffinityTerm:
                topologyKey: topology.kubernetes.io/zone
                labelSelector:
                  matchExpressions:
                    - key: k8s.slp.com/cmd
                      operator: In
                      values:
                        {{- with $mergedValues.affinity.podAntiAffinity.values }}
                        {{- toYaml . | nindent 22 }}
                        {{- else }}
                        - {{ $cmdInstance }}
                        {{- end }}
      {{- end }}

      containers:
        - name: {{ $cmdInstance }}
          image: {{ $mergedValues.image.repository }}:{{ $mergedValues.image.tag }}
          imagePullPolicy: {{ $mergedValues.image.pullPolicy }}
          resources:
            {{- toYaml $mergedValues.resources | nindent 12 }}
          #command: ["/bin/sh", "-c", "sleep 1000000"]
          command: ["bin/slp-functor-cmd"]
          args:
            - "--name={{ $cmdOriginName }}"
            - "--action={{ $cmdOriginAction }}"
            - "--gf.gcfg.file=gf.gcfg.file.toml"
          {{- if $mergedValues.livenessProbe.enabled}}
          livenessProbe:
            httpGet:
              port: 8080
              path: /ping
            initialDelaySeconds: {{ $mergedValues.livenessProbe.initialDelaySeconds | default 5 }}
            periodSeconds: {{ $mergedValues.livenessProbe.periodSeconds | default 5}}
            timeoutSeconds: {{ $mergedValues.livenessProbe.timeoutSeconds | default 5}}
            failureThreshold: {{ $mergedValues.livenessProbe.failureThreshold | default 3 }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: CONSUL_AGENT_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: PROBE_PORT
              value: "8080"
            - name: TZ
              value: "Asia/Shanghai"
          volumeMounts:
            - name: "gf-gcfg-file"
              mountPath: "/home/ecs-user/webroot/slp-go/config/gf.gcfg.file.toml"
              subPath: "gf.gcfg.file.toml"
            {{- if $mergedValues.gfLoggerVolume.enabled }}
            - name: gf-logger
              mountPath: /tmp/log/server
              subPathExpr: $(POD_NAME)
            {{- end }}
            - name: tz-config
              mountPath: /etc/localtime
      {{- if $mergedValues.imagePullSecrets.enabled }}
      imagePullSecrets:
        {{- toYaml $mergedValues.imagePullSecrets.secrets | nindent 8 }}
      {{- end }}
      volumes:
        - name: gf-gcfg-file
          configMap:
            name: {{ $.Values.gfConfigMap.name }}
        {{- if $mergedValues.gfLoggerVolume.enabled }}
        - name: gf-logger
          persistentVolumeClaim:
            claimName: {{ $cmdInstance }}-gf-logger-pvc
        {{- end }}
        - name: tz-config
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
{{- end }}
